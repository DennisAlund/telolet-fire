path /users {
    read() { isSignedIn() }
    index() { [ "location"] }

    path /{user_id} is User {
        write() { isCurrentUser(user_id) }
        validate() { user_id == this.uid }
    }
}

path /userStates/{uid} is UserState[] {
    read() { isCurrentUser(uid) }
    write() { isCurrentUser(uid) }
    index() { [ "state"] }
}

path /requestsSent/{user_id} {
    read() { isCurrentUser(user_id) }
    index() { [ "state"] }

    path /{id} is Telolet {
        create() { isSignedIn() && auth.uid == this.requesterUid }
        update() { isCurrentUser(this.receiverUid) || isCurrentUser(this.requesterUid) }
        validate() { this.id == id && this.requesterUid == user_id }
    }

}

path /requestsReceived/{user_id} {
    read() { isCurrentUser(user_id) }
    index() { [ "state"] }

    path /{id} is Telolet {
        create() { isSignedIn() && auth.uid == this.requesterUid }
        update() { isCurrentUser(this.receiverUid) || isCurrentUser(this.requesterUid) }
        validate() { this.id == id && this.receiverUid == user_id }
    }
}

type UserState {
    state: String,
    teloletId: String
}

type User {
    uid: String,
    location: String | Null,
    fcmToken: String | Null,
    lastLogin: Number | Null,
    image: String,
    handle: String,
    color: String
}

type Telolet {
    id: String,
    state: String,
    created: Immutable<TimeStamp>,
    modified: CurrentTimestamp,

    requesterUid: Immutable<String>,
    requestLocation: Immutable<String>,

    receiverUid: Immutable<String>,
    resolveLocation: Immutable<String> | Null
}

type Immutable<T> extends T {
  validate() { prior(this) == null || prior(this) == this }
}

type TimeStamp extends Number {
  validate() { this >= 0 }
}

type CurrentTimestamp extends TimeStamp {
  validate() { this == now }
}

isSignedIn() { auth !== null }
isCurrentUser(uid) { isSignedIn() && auth.uid == uid }
